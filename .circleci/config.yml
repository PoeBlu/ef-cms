version: 2
jobs:
  bundle:
    docker:
      - image: sutt0n/ef-cms:latest
    steps:
      - restore_cache:
          name: Source - Restoring Cache
          keys:
            - source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
            - source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - source-{{ .Environment.CACHE_VERSION }}-
      - checkout
      - save_cache:
          name: Source - Saving Cache
          key: source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - restore_cache:
          name: NPM - Restoring Cache
          keys:
            - npm-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-
            - npm-{{ .Environment.CACHE_VERSION }}-
      - run:
          name: NPM - Install
          command: npm i
      - save_cache:
          name: NPM - Save to Cache
          paths:
            - node_modules # location depends on npm version
          key: npm-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build-api:
    docker:
      - image: sutt0n/ef-cms:latest
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Lint
          command: npm run lint
      - run:
          name: Shellcheck
          command: |
            ./run-shellcheck.sh
      - run:
          name: Web API - Test
          command: npm run test:api
      - run:
          name: Web API - SonarQube
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            /tmp/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey="${API_SONAR_KEY}" \
            -Dsonar.branch.name="${CIRCLE_BRANCH}" \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectBaseDir="web-api" \
            -Dproject.settings="web-api/sonar-project.properties" \
            -Dsonar.login="${API_SONAR_TOKEN}" \
            -Dsonar.host.url="https://sonarcloud.io"

  build-shared:
    docker:
      - image: sutt0n/ef-cms:latest
    environment:
      _JAVA_OPTIONS: '-Xms1024m -Xmx2024m'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Shared - Test
          command: npm run test:shared
      - run:
          name: Shared - SonarQube
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            /tmp/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey="${SHARED_SONAR_KEY}" \
            -Dsonar.branch.name="${CIRCLE_BRANCH}" \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectBaseDir="shared" \
            -Dproject.settings="shared/sonar-project.properties" \
            -Dsonar.login="${SHARED_SONAR_TOKEN}" \
            -Dsonar.host.url="https://sonarcloud.io"

  build-client:
    docker:
      - image: sutt0n/ef-cms:latest
    environment:
      _JAVA_OPTIONS: '-Xms1024m -Xmx2024m'
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Web Client - Test
          command: |
            AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npm run start:api > /dev/null &
            ./wait-until.sh http://localhost:3000/api/swagger
            sleep 5
            npm run test:client
      - run:
          name: Web Client - SonarQube
          command: |
            export SONAR_SCANNER_OPTS="-Xmx2048m"
            /tmp/sonar-scanner/bin/sonar-scanner \
            -Dsonar.projectKey="${UI_SONAR_KEY}" \
            -Dsonar.branch.name="${CIRCLE_BRANCH}" \
            -Dsonar.organization="${SONAR_ORG}" \
            -Dsonar.projectBaseDir="web-client" \
            -Dproject.settings="web-client/sonar-project.properties" \
            -Dsonar.login="${UI_SONAR_TOKEN}" \
            -Dsonar.host.url="https://sonarcloud.io"

  e2e-pa11y:
    docker:
      - image: sutt0n/ef-cms:latest
    environment:
      _JAVA_OPTIONS: '-Xms1024m -Xmx2024m'
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Pa11y
          command: |
            SLS_DEBUG=* AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npx run-p start:client:ci start:api:ci > /dev/null &
            ./wait-until-services.sh
            ./wait-until.sh http://localhost:3000/api/swagger
            npm run test:pa11y

  e2e-cypress:
    docker:
      - image: sutt0n/ef-cms:latest
    environment:
      _JAVA_OPTIONS: '-Xms1024m -Xmx2024m'
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cypress
          command: |
            CYPRESS_VERSION=`./node_modules/.bin/cypress --version | awk -F' ' '{print $4; exit}'`
            if [ ! -e "/root/.cache/Cypress/${CYPRESS_VERSION}/Cypress/Cypress" ]; then
              ./node_modules/.bin/cypress install
            fi

            SLS_DEBUG=* AWS_ACCESS_KEY_ID=noop AWS_SECRET_ACCESS_KEY=noop npx run-p start:client:ci start:api:ci > /dev/null &
            ./wait-until-services.sh
            ./wait-until.sh http://localhost:1234
            npm run cypress
      - store_artifacts:
          path: ~/project/cypress/videos/

  deploy-terraform-ui:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: 'Deploy - Web Client - Terraform'
          command: |
            echo "export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
            echo "export DYNAMSOFT_PRODUCT_KEYS='$(~/project/get-keys.sh $CIRCLE_BRANCH)'" >> $BASH_ENV
            source $BASH_ENV

            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            EFCMS_DOMAIN=${EFCMS_DOMAIN} \
            DYNAMSOFT_S3_ZIP_PATH=${DYNAMSOFT_S3_ZIP_PATH} \
            DYNAMSOFT_URL=${DYNAMSOFT_URL} \
            DYNAMSOFT_PRODUCT_KEYS=${DYNAMSOFT_PRODUCT_KEYS} \
            cd ~/project/web-client/terraform/main && \
            ../bin/deploy-app.sh $ENV

  deploy-terraform-api:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: 'Deploy - Web API - Terraform'
          command: |
            echo "export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
            echo "export DYNAMSOFT_PRODUCT_KEYS='$(~/project/get-keys.sh $CIRCLE_BRANCH)'" >> $BASH_ENV
            source $BASH_ENV

            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            COGNITO_SUFFIX=${COGNITO_SUFFIX} \
            EFCMS_DOMAIN=${EFCMS_DOMAIN} \
            SES_DMARC_EMAIL=${SES_DMARC_EMAIL} \
            cd ~/project/web-api/terraform/main && \
            ../bin/deploy-app.sh ${ENV}

  deploy-s3:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: 'Deploy - Web Client - S3'
          command: |
            echo "export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
            echo "export DYNAMSOFT_PRODUCT_KEYS='$(~/project/get-keys.sh $CIRCLE_BRANCH)'" >> $BASH_ENV
            source $BASH_ENV

            DYNAMSOFT_URL_OVERRIDE=${DYNAMSOFT_URL_OVERRIDE} \
            ENV=${ENV} \
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
            EFCMS_DOMAIN=${EFCMS_DOMAIN} \
            COGNITO_SUFFIX=${COGNITO_SUFFIX} \
            GIT_COMMIT=${CIRCLE_SHA1} \
            ~/project/web-client/build-dist.sh $ENV && \
            aws s3 sync dist s3://ui-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache && \
            aws s3 sync dist s3://failover-ui-${ENV}.${EFCMS_DOMAIN} --delete --cache-control no-cache

  deploy-layer-clamav:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup ENV
          command: echo "export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: Build Lambda Layer - ClamAV
          command: |
            cd web-api/runtimes/clamav
            ./build.sh
      - run:
          name: Deploy Lambda Layer - ClamAV - us-east-1
          command: |
            ./web-api/run-serverless-clamav.sh ${ENV} us-east-1
      - run:
          name: Deploy Lambda Layer - ClamAV - us-west-1
          command: |
            ./web-api/run-serverless-clamav.sh ${ENV} us-west-1

  deploy-layer-ghostscript:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Setup ENV
          command: echo "export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: Build Lambda Layer - Ghostscript
          command: |
            cd web-api/runtimes/ghostscript
            ./build.sh
      - run:
          name: Deploy Lambda Layer - Ghostscript
          command: |
            ./web-api/run-serverless-ghostscript.sh ${ENV} us-west-1
      - run:
          name: Deploy Lambda Layer - Ghostscript
          command: |
            ./web-api/run-serverless-ghostscript.sh ${ENV} us-east-1

  deploy-layer-puppeteer:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup ENV
          command: echo "export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Lambda Layer - Puppeteer
          command: |
            cd web-api/runtimes/puppeteer
            ./build.sh
      - run:
          name: Deploy Lambda Layer - Puppeteer - us-east-1
          command: |
            export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)
            ./web-api/run-serverless-puppeteer.sh ${ENV} us-east-1
      - run:
          name: Deploy Lambda Layer - Puppeteer - us-west-1
          command: |
            export ENV=$(~/project/get-env.sh $CIRCLE_BRANCH)
            ./web-api/run-serverless-puppeteer.sh ${ENV} us-west-1

  deploy-sls-api-east-1:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Serverless - API - us-east-1'
          command: |
            ./web-api/run-serverless-api.sh $ENV us-east-1

  deploy-sls-api-west-1:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Serverless - API - us-west-1'
          command: |
            ./web-api/run-serverless-api.sh $ENV us-west-1

  deploy-sls-cases-east-1:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Serverless - Cases - us-east-1'
          command: |
            ./web-api/run-serverless-cases.sh $ENV us-east-1

  deploy-sls-cases-west-1:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Serverless - Cases - us-west-1'
          command: |
            ./web-api/run-serverless-cases.sh $ENV us-west-1

  deploy-sls-case-documents-east-1:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Serverless - Case Documents - us-east-1'
          command: |
            ./web-api/run-serverless-case-documents.sh $ENV us-east-1

  deploy-sls-case-documents-west-1:
    docker:
      - image: sutt0n/ef-cms:experimental
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Serverless - Case Documents - us-west-1'
          command: |
            ./web-api/run-serverless-case-documents.sh $ENV us-west-1

  deploy-api-east:
    machine:
      docker_layer_caching: true
    steps:
      - run:
          name: 'Deploy - Web API - Serverless - Case Documents - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-case-documents.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Case Deadlines - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-case-deadlines.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Case Notes - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-case-notes.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Users - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-users.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Documents - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-documents.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Work Items - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-work-items.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Sections - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-sections.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Serverless - Trial Sessions - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-trial-sessions.sh ${ENV} us-east-1"

  deploy-api-west:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: cd web-api/runtimes/clamav && ./build.sh && cd ../ghostscript && ./build.sh && cd ../puppeteer && ./build.sh && cd ../../.. && docker build -t efcms -f Dockerfile .
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Web API - Layers - Puppeteer - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-puppeteer.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Layers - Ghostscript - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-ghostscript.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Layers - ClamAV - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "./web-api/run-serverless-clamav.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - API - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-api.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Cases - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-cases.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Case Documents - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-case-documents.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Case Deadlines - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-case-deadlines.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Case Notes - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-case-notes.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Users - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-users.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Documents - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-documents.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Work Items - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-work-items.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Sections - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-sections.sh ${ENV} us-west-1"
      - run:
          name: 'Deploy - Web API - Serverless - Trial Sessions - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" -v $(pwd)/.cache:/home/app/.cache --rm efcms /bin/sh -c "./web-api/run-serverless-trial-sessions.sh ${ENV} us-west-1"

  post-deploy:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build -t efcms -f Dockerfile .
      - run:
          name: Setup Env
          command: echo "export ENV=$(./get-env.sh $CIRCLE_BRANCH)" >> $BASH_ENV
      - run:
          name: 'Deploy - Web API - Route53'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "cd web-api && ./setup-regional-route53.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - S3 Replication'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "EFCMS_DOMAIN=${EFCMS_DOMAIN}" --rm efcms /bin/sh -c "cd web-api && ./setup-s3-replication.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Global Tables'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && node setup-global-tables.js efcms-${ENV} us-east-1,us-west-1"
      - run:
          name: 'Deploy - Web API - Cognito Customize'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && ./setup-cognito-ui.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Cognito Create Users'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "USTC_ADMIN_PASS=${USTC_ADMIN_PASS}" --rm efcms /bin/sh -c "cd web-api && ./setup-cognito-users.sh ${ENV}"
      - run:
          name: 'Deploy - Web API - Smoke Tests - us-east-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && ./run-smoketests.sh ${ENV} us-east-1"
      - run:
          name: 'Deploy - Web API - Smoke Tests - us-west-1'
          command: docker run -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" --rm efcms /bin/sh -c "cd web-api && ./run-smoketests.sh ${ENV} us-west-1"

workflows:
  version: 2
  hourly:
    jobs:
      - deploy-ui
      - deploy-api-west
      - deploy-api-east
    triggers:
      - schedule:
          cron: '0 12-23 * * 1-5'
          filters:
            branches:
              only:
                - develop
  build-and-deploy:
    jobs:
      - bundle
      - build-shared:
          requires:
            - bundle
      - build-api:
          requires:
            - bundle
      - build-client:
          requires:
            - bundle
      - e2e-pa11y:
          requires:
            - bundle
      - e2e-cypress:
          requires:
            - bundle
      - deploy-terraform-ui:
          requires:
            - build-shared
            - build-api
            - build-client
            - e2e-pa11y
            - e2e-cypress
      - deploy-terraform-api:
          requires:
            - build-shared
            - build-api
            - build-client
            - e2e-pa11y
            - e2e-cypress
      - deploy-layer-clamav:
          requires:
            - build-shared
            - build-api
            - build-client
            - e2e-pa11y
            - e2e-cypress
      - deploy-layer-ghostscript:
          requires:
            - build-shared
            - build-api
            - build-client
            - e2e-pa11y
            - e2e-cypress
      - deploy-layer-puppeteer:
          requires:
            - build-shared
            - build-api
            - build-client
            - e2e-pa11y
            - e2e-cypress
      - deploy-s3:
          requires:
            - deploy-terraform-api
            - deploy-terraform-ui
            - deploy-layer-puppeteer
            - deploy-layer-ghostscript
            - deploy-layer-clamav
      - deploy-sls-api-east-1:
          requires:
            - deploy-terraform-api
            - deploy-terraform-ui
            - deploy-layer-puppeteer
            - deploy-layer-ghostscript
            - deploy-layer-clamav
      - deploy-sls-api-west-1:
          requires:
            - deploy-terraform-api
            - deploy-terraform-ui
            - deploy-layer-puppeteer
            - deploy-layer-ghostscript
            - deploy-layer-clamav
      - deploy-sls-cases-west-1:
          requires:
            - deploy-terraform-api
            - deploy-terraform-ui
            - deploy-layer-puppeteer
            - deploy-layer-ghostscript
            - deploy-layer-clamav
      - deploy-sls-cases-east-1:
          requires:
            - deploy-terraform-api
            - deploy-terraform-ui
            - deploy-layer-puppeteer
            - deploy-layer-ghostscript
            - deploy-layer-clamav
          # filters:
          #   branches:
          #     only:
          # - develop
          # - staging
          # - master
      # - deploy-api-east:
      #     requires:
      #       - deploy-bundle
      # filters:
      #   branches:
      #     only:
      #       - develop
      #       - staging
      #       - master
      # - deploy-api-west:
      #     requires:
      #       - deploy-bundle
      # filters:
      #   branches:
      #     only:
      #       - develop
      #       - staging
      #       - master
      # - post-deploy:
      #     requires:
      #       - deploy-ui
      #       - deploy-api-west
      #       - deploy-api-east
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master
